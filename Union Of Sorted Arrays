#include <bits/stdc++.h>
#include <iostream>
#include <utility>

using namespace std;

//---------------------------------------BruteForce----------------------------

vector <int> Union(vector <int> &arr1, int n,vector <int> &arr2, int m){
vector <int> Union_Vector;
    
    set<int> st;
    
    for(int i = 0; i<n; i++){
        st.insert(arr1[i]);
    }

    for(int j = 0; j<m; j++){
        st.insert(arr2[j]);
    }




   vector <int> Union_vect(st.size());

    for(auto it:st){
        Union_vect.push_back(it);
    }



}


//-----------------------------Optimised-------------------------->

vector<int> Union_pointer(vector<int> &arr1, vector<int> &arr2) {
    int n = arr1.size();
    int m = arr2.size();

    int i = 0, j = 0;
    vector<int> Union_vector;

    while(i < n && j < m) {
        if(arr1[i] < arr2[j]) {
            if(Union_vector.empty() || Union_vector.back() != arr1[i])
                Union_vector.push_back(arr1[i]);
            i++;
        }
        else if(arr2[j] < arr1[i]) {
            if(Union_vector.empty() || Union_vector.back() != arr2[j])
                Union_vector.push_back(arr2[j]);
            j++;
        }
        else { // arr1[i] == arr2[j]
            if(Union_vector.empty() || Union_vector.back() != arr1[i])
                Union_vector.push_back(arr1[i]);
            i++;
            j++;
        }
    }

    // Remaining elements
    while(i < n) {
        if(Union_vector.empty() || Union_vector.back() != arr1[i])
            Union_vector.push_back(arr1[i]);
        i++;
    }

    while(j < m) {
        if(Union_vector.empty() || Union_vector.back() != arr2[j])
            Union_vector.push_back(arr2[j]);
        j++;
    }

    return Union_vector;
}





int main(){

    int n;
    cin>>n;

    int m;
    cin>>m;

    vector <int> arr1(n);
    for(int i = 0; i,n; i++){
        cin>>arr1[i];
    }

    vector <int> arr2(m);
    for(int i = 0; i<n; i++){
        cin>>arr2[i];
    }

    Union_pointer(arr1,  arr2 );
    return 0;
}
