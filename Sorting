#include <bits/stdc++.h>
#include <iostream>
using namespace std;


//----------------------------------------------------Bubble Sort----------------------------------------------
void bubbleSort(int arr[], int n){
    for(int i = 0; i<n; i++){
        for(int j=0; j<n-i-1; j++){


            if(arr[j] > arr[j+1]){
                swap(arr[j], arr[j+1]);
            }

        }
    }
}

//-----------------------------------------------Selection Sort-----------------------------------------------------

void SelectionSort(int arr[], int n){

    for(int i = 0; i<n-1; i++){
        int minimum = i;

        for(int j= i+ 1; j< n; j++){
            if(arr[j] < arr[minimum]){
                minimum = j;
            }
        }

        swap(arr[i],arr[minimum]);
    }

}


//-----------------------------------------------------Insertion Sort---------------------------------------------
void InsertionSort(int arr[],int n){
    for(int i = 1; i<n; i++){
        int current = i;
        int prev = i-1;
        while(prev >=0 && arr[prev] > current){
            arr[prev + 1] = arr[prev];
            prev --;
        }

        arr[prev+1] = current;
    }
}

void printArray(int arr[],int n){
    for(int i=0; i<n; i++){

        cout<<arr[i];

    }
}

//-----------------------------------Merge Sort-------------------------------------------------

void merge(vector<int> &arr,int low, int mid,int high){

    vector <int> temp;

    int left = low;
    int right = mid+1;

    while(left<=mid && right<= high){

        if(arr[left] <= arr[right]){
            temp.push_back(arr[left]);
            left++;
        }
        else{
            temp.push_back(arr[right]);
            right++;
        }

    }

    while(left <= mid){
        temp.push_back(arr[left]);
    }

    while(right<= high){
        temp.push_back(arr[right]);
    }


    for(int i = 0; i<arr.size(); i++){
        arr[low + i] = temp[i];

    }
}


void mS(vector <int> &arr, int low,  int high){
    if(low == high) return;
    int mid = (low + high)/2;
    mS(arr, low, mid);
    mS(arr,mid+1, high);
    merge(arr,low, mid, high);

}

vector <int> mergeSort(vector <int> &arr, int n){

    mS(arr,0, n-1);
}


// --------------------------------------Quick Sort-----------------------------------------------


int partition(vector <int> &arr, int low, int high){

    int pivot = arr[low];
    int i = low;
    int j = high;

    while (i<j){

        while(arr[i] <= arr[pivot] && i <= high-1){
            i++;
        }

        while(arr[j] > arr[pivot] && j >= low+1){
            j--;
        }

        if(i < j){
            swap(arr[i], arr[j]);
        }

        

    }
    
        swap(arr[low], arr[j]);
        return j;

}

void Qs(vector <int> & arr, int low, int high){
    if(low < high){
    int Pindex = partition(arr,low, high);
    Qs(arr, low, Pindex - 1);
    Qs(arr, Pindex + 1, high);
    }
}

vector <int> quicksort(vector <int> &arr){
    Qs(arr,0,arr.size()-1);
}



int main(){
     int n;
     cout<<"Enter n:";
     cin>>n;

     int arr[n];
     cout<<"Enter the array:";
     for(int i=0; i<n; i++){
        cin>>arr[i];
     }
    return 0;
}
