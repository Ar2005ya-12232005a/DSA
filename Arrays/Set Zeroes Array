#include <bits/stdc++.h>
#include <iostream>
#include <utility>
using namespace std;


//---------------------------------Brute Force O(N^3)

void MatrixRows(vector<vector<int>>&matrix, int rows){
   int cols = matrix[0].size();
   for(int i =0; i< rows; i++){
    if(matrix[i][cols] == 0){
        matrix[i][cols] = -1;
    }
   }
}

void MatrixCols (vector <vector<int>>& matrix, int cols){
    int rows = matrix.size();
    for(int j = 0; j<cols; j++){
        if(matrix[rows][j] == 0){
            matrix[rows][j] = -1;
        }
    }
}

void MatrixZeroes(vector <vector<int>> &matrix){
    int rows = matrix.size();
    int cols = matrix[0].size();

    for(int i = 0; i<rows; i++){
        for(int j =0 ; j<cols; j++){
            if(matrix[i][j] == 0){
                MatrixRows(matrix,i);
                MatrixCols(matrix, j);
            }
        }
    }
}


//---------------------------------------Optimised   O(N^2)


vector <vector<int>> ZeroMatrix(vector <vector <int>> &matrix, int rows, int cols){
    int row[rows] = {0};
    int col[cols] = {0};
    for(int i = 0; i<rows; i++){
        for(int j = 0; j< cols; j++){
            if(matrix[i][j] == 0){
                row[i] = 1;
                col[j] = 1;
            }
        }
    }


    for(int i = 0; i<rows; i++){
        for(int j = 0; j<cols; j++){
            if(row[i] || col[j] == 1){
                matrix[i][j] = 0;
            }
        }
    }

   return matrix;

}



//-----------------------------------------> More optimised   T O(N^2) && S O(1)

vector <vector<int>> OptimisedZeros(vector <vector <int>>& matrix, int rows, int cols){
    int col0 = 1;
    for(int i =0 ; i<rows; i++){
        for(int j = 0; j< cols; j++){
            if(matrix[i][j] == 0){
                matrix[i][0] = 0;
            }
            if( j != 0){
                matrix[0][j] = 0;
            }else{
                col0 = 0;
            }

        }
    }


    for(int i = 1; i<rows; i++){
        for(int j = 1; j< cols; j++){
            if(matrix[i][j] != 0 ){
                if(matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            }

        }
    }

    if(matrix[0][0] == 0){
        for(int j = 0; j<cols; j++){
            matrix[0][j] = 0;
        }
    } 
    if(col0 = 0){
        for(int i =0; i<rows; i++){
            matrix[i][0] = 0;
        }
    }

    return matrix;
}
int main(){

    int rows, cols;
    cout<<"Enter the rows and columns: ";
    cin>>rows>>cols;


    vector <vector<int>> matrix(rows,vector<int> (cols));

    for(int i =0; i<cols; i++){
        for(int j = 0; j<rows; j++){
            cin>> matrix[i][j];
        }
    }


    
    return 0;
}
